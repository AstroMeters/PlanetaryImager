#!/bin/bash


DAILY_TAG_SUFFIX="$(git log --pretty=format:'%h' -n 1)"
export DEST=/tmp
COMPILE_ENVS=""
export MAKE_OPTS=""
export CMAKE_EXTRA_OPTS=""
export CMAKE_BUILD_TYPE=RelWithDebInfo
export PACKAGE_VERSION_SUFFIX=""
SNAPSHOT_MODE=false

print-help() {
  cat <<EOF
Usage: $0 [options] [targets-to-compile] [ -- EXTRA_CMAKE_OPTIONS ]
Options:
    -a|--all                    compile all available targets
    -d|--dest                   destination directory to place archives/packages
    -s|--daily-snapshot         create a daily build version (DEBUG enabled, daily version number)
    -t|--daily-version-tag      only for daily builds, add a tag version suffix
    -j|--jobs <number>          number of parallel jobs for make
EOF
}

[[ -r "$HOME/.config/planetaryimager_packaging_default.conf" ]] && . "$HOME/.config/planetaryimager_packaging_default.conf"

while [[ -n "$1" && "$1" != "--" ]]; do
    param="$1"
    shift
    case "$param" in
        -a|--all)
            COMPILE_ENVS="$( find targets -name "*.env" )"
            ;;
        -d|--dest)
            export DEST="$1"; shift
            ;;
        -t|--daily-version-tag)
            DAILY_TAG_SUFFIX="$1"; shift
            ;;
        -s|--daily-snapshot)
            SNAPSHOT_MODE=true
            ;;
        -j|--jobs)
            export MAKE_OPTS="$MAKE_OPTS -j$1"; shift
            ;;
        -h|--help)
            print-help
            exit 0
            ;;
        *)
            [ -r "$param" ] && COMPILE_ENVS="$COMPILE_ENVS $param"
            ;;
    esac
done
shift
export CMAKE_OVERRIDE_OPTIONS="$@"

echo "Compile dirs: $COMPILE_ENVS"
export DAILY_TAG="$( date +%Y%m%d )-$DAILY_TAG_SUFFIX"

if [[ "$SNAPSHOT_MODE" == true ]]; then
    export CMAKE_BUILD_TYPE=RelWithDebInfo
    export PACKAGE_VERSION_SUFFIX="-${DAILY_TAG}"
fi

tmpfile=/tmp/planetaryimager-compile-$$.tmp
for env_file in $COMPILE_ENVS; do
  (
    env_name="$( basename "$env_file" .env )"
    echo "Compiling $env_name"
    export COMPOSE_PROJECT_NAME="planetaryimager_build_$env_name"
    . "$env_file"
    docker-compose up
    container_id="$( docker-compose ps -q )"
    [[ "$(docker inspect -f '{{ .State.ExitCode }}' $container_id)" == 0 ]] && status="success" || status="failed"
    echo "$env_name package compilation: [$status]" >> "$tmpfile"
  )
done

column -t < "$tmpfile"
rm -f "$tmpfile"
